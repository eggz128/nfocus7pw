{
  "config": {
    "configFile": "E:\\JSTS\\nfocus7pw\\playwright.config.ts",
    "rootDir": "E:/JSTS/nfocus7pw/tests",
    "forbidOnly": false,
    "fullyParallel": true,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 4
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "json-results/test-results.json"
        }
      ],
      [
        "junit",
        {
          "outputFile": "junit-results/test-results.xml"
        }
      ],
      [
        "E:\\JSTS\\nfocus7pw\\node_modules\\allure-playwright\\dist\\cjs\\index.js",
        null
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 15000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "E:/JSTS/nfocus7pw/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {},
        "id": "chromium",
        "name": "chromium",
        "testDir": "E:/JSTS/nfocus7pw/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 20000
      },
      {
        "outputDir": "E:/JSTS/nfocus7pw/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {},
        "id": "firefox",
        "name": "firefox",
        "testDir": "E:/JSTS/nfocus7pw/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 20000
      },
      {
        "outputDir": "E:/JSTS/nfocus7pw/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {},
        "id": "webkit",
        "name": "webkit",
        "testDir": "E:/JSTS/nfocus7pw/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 20000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "version": "1.49.0",
    "workers": 4,
    "webServer": null
  },
  "suites": [
    {
      "title": "test-1.spec.ts",
      "file": "test-1.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "LoginLogoutTest",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "failed",
                  "duration": 7517,
                  "error": {
                    "message": "TimeoutError: locator.click: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for getByRole('row', { name: 'User Name?' }).locator('#username')\u001b[22m\n",
                    "stack": "TimeoutError: locator.click: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for getByRole('row', { name: 'User Name?' }).locator('#username')\u001b[22m\n\n    at E:\\JSTS\\nfocus7pw\\tests\\test-1.spec.ts:24:76",
                    "location": {
                      "file": "E:\\JSTS\\nfocus7pw\\tests\\test-1.spec.ts",
                      "column": 76,
                      "line": 24
                    },
                    "snippet": "\u001b[0m \u001b[90m 22 |\u001b[39m   \u001b[90m//Chaining locators works for Playwright as it does in WebDriver (and Cypress...)\u001b[39m\n \u001b[90m 23 |\u001b[39m   \u001b[90m//The below finds a table row, then looks for an element inside with an id of username, before clicking that elm\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 24 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mgetByRole(\u001b[32m'row'\u001b[39m\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'User Name?'\u001b[39m })\u001b[33m.\u001b[39mlocator(\u001b[32m'#username'\u001b[39m)\u001b[33m.\u001b[39mclick()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 25 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mgetByRole(\u001b[32m'row'\u001b[39m\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'User Name?'\u001b[39m })\u001b[33m.\u001b[39mlocator(\u001b[32m'#username'\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[32m'edgewords'\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 26 |\u001b[39m   \n \u001b[90m 27 |\u001b[39m   \u001b[90m/*\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "E:\\JSTS\\nfocus7pw\\tests\\test-1.spec.ts",
                        "column": 76,
                        "line": 24
                      },
                      "message": "TimeoutError: locator.click: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for getByRole('row', { name: 'User Name?' }).locator('#username')\u001b[22m\n\n\n\u001b[0m \u001b[90m 22 |\u001b[39m   \u001b[90m//Chaining locators works for Playwright as it does in WebDriver (and Cypress...)\u001b[39m\n \u001b[90m 23 |\u001b[39m   \u001b[90m//The below finds a table row, then looks for an element inside with an id of username, before clicking that elm\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 24 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mgetByRole(\u001b[32m'row'\u001b[39m\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'User Name?'\u001b[39m })\u001b[33m.\u001b[39mlocator(\u001b[32m'#username'\u001b[39m)\u001b[33m.\u001b[39mclick()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 25 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mgetByRole(\u001b[32m'row'\u001b[39m\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'User Name?'\u001b[39m })\u001b[33m.\u001b[39mlocator(\u001b[32m'#username'\u001b[39m)\u001b[33m.\u001b[39mfill(\u001b[32m'edgewords'\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 26 |\u001b[39m   \n \u001b[90m 27 |\u001b[39m   \u001b[90m/*\u001b[39m\u001b[0m\n\u001b[2m    at E:\\JSTS\\nfocus7pw\\tests\\test-1.spec.ts:24:76\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:17.828Z",
                  "attachments": [],
                  "errorLocation": {
                    "file": "E:\\JSTS\\nfocus7pw\\tests\\test-1.spec.ts",
                    "column": 76,
                    "line": 24
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "492d4a3e7e76c4aacf4a-de99188b3931fdce65ee",
          "file": "test-1.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "LoginLogoutTest",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [
                {
                  "workerIndex": 7,
                  "status": "interrupted",
                  "duration": 5768,
                  "error": {
                    "message": "Error: Test ended.\nBrowser logs:\n\n<launching> C:\\Users\\Stephen Powell\\AppData\\Local\\ms-playwright\\firefox-1466\\firefox\\firefox.exe -no-remote -headless -profile C:\\Users\\STEPHE~1\\AppData\\Local\\Temp\\playwright_firefoxdev_profile-9W4UHc -juggler-pipe -silent\n<launched> pid=6348\n[pid=6348][err] *** You are running in headless mode.\n[pid=6348][err] JavaScript warning: resource://services-settings/Utils.sys.mjs, line 116: unreachable code after return statement\n[pid=6348][out] console.warn: services.settings: Ignoring preference override of remote settings server\n[pid=6348][out] console.warn: services.settings: Allow by setting MOZ_REMOTE_SETTINGS_DEVTOOLS=1 in the environment\n[pid=6348][out] console.error: ({})\n[pid=6348][out] \n[pid=6348][out] Juggler listening to the pipe\n[pid=6348][out] Crash Annotation GraphicsCriticalError: |[0][GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt (t=34.8737) [GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt\n[pid=6348][err] JavaScript error: chrome://juggler/content/Helper.js, line 82: NS_ERROR_FAILURE: Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIWebProgress.removeProgressListener]\n[pid=6348] <process did exit: exitCode=3221225786, signal=null>\n[pid=6348] starting temporary directories cleanup",
                    "stack": "Error: Test ended.\nBrowser logs:\n\n<launching> C:\\Users\\Stephen Powell\\AppData\\Local\\ms-playwright\\firefox-1466\\firefox\\firefox.exe -no-remote -headless -profile C:\\Users\\STEPHE~1\\AppData\\Local\\Temp\\playwright_firefoxdev_profile-9W4UHc -juggler-pipe -silent\n<launched> pid=6348\n[pid=6348][err] *** You are running in headless mode.\n[pid=6348][err] JavaScript warning: resource://services-settings/Utils.sys.mjs, line 116: unreachable code after return statement\n[pid=6348][out] console.warn: services.settings: Ignoring preference override of remote settings server\n[pid=6348][out] console.warn: services.settings: Allow by setting MOZ_REMOTE_SETTINGS_DEVTOOLS=1 in the environment\n[pid=6348][out] console.error: ({})\n[pid=6348][out] \n[pid=6348][out] Juggler listening to the pipe\n[pid=6348][out] Crash Annotation GraphicsCriticalError: |[0][GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt (t=34.8737) [GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt\n[pid=6348][err] JavaScript error: chrome://juggler/content/Helper.js, line 82: NS_ERROR_FAILURE: Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIWebProgress.removeProgressListener]\n[pid=6348] <process did exit: exitCode=3221225786, signal=null>\n[pid=6348] starting temporary directories cleanup"
                  },
                  "errors": [
                    {
                      "message": "Error: Test ended.\nBrowser logs:\n\n<launching> C:\\Users\\Stephen Powell\\AppData\\Local\\ms-playwright\\firefox-1466\\firefox\\firefox.exe -no-remote -headless -profile C:\\Users\\STEPHE~1\\AppData\\Local\\Temp\\playwright_firefoxdev_profile-9W4UHc -juggler-pipe -silent\n<launched> pid=6348\n[pid=6348][err] *** You are running in headless mode.\n[pid=6348][err] JavaScript warning: resource://services-settings/Utils.sys.mjs, line 116: unreachable code after return statement\n[pid=6348][out] console.warn: services.settings: Ignoring preference override of remote settings server\n[pid=6348][out] console.warn: services.settings: Allow by setting MOZ_REMOTE_SETTINGS_DEVTOOLS=1 in the environment\n[pid=6348][out] console.error: ({})\n[pid=6348][out] \n[pid=6348][out] Juggler listening to the pipe\n[pid=6348][out] Crash Annotation GraphicsCriticalError: |[0][GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt (t=34.8737) [GFX1-]: RenderCompositorSWGL failed mapping default framebuffer, no dt\n[pid=6348][err] JavaScript error: chrome://juggler/content/Helper.js, line 82: NS_ERROR_FAILURE: Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIWebProgress.removeProgressListener]\n[pid=6348] <process did exit: exitCode=3221225786, signal=null>\n[pid=6348] starting temporary directories cleanup"
                    },
                    {
                      "message": "Error: browserContext.newPage: Test ended."
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:52.918Z",
                  "attachments": []
                }
              ],
              "status": "skipped"
            }
          ],
          "id": "492d4a3e7e76c4aacf4a-b36a304ee9352b65316c",
          "file": "test-1.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "LoginLogoutTest",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "492d4a3e7e76c4aacf4a-26d20c632d63ace3c022",
          "file": "test-1.spec.ts",
          "line": 3,
          "column": 5
        }
      ]
    },
    {
      "title": "test-2.spec.ts",
      "file": "test-2.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "test",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 1,
                  "status": "passed",
                  "duration": 15264,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:17.873Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "b0639a757ff76b21cdba-ef10cfa7ec7e1428db71",
          "file": "test-2.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "test2",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 2,
                  "status": "passed",
                  "duration": 14194,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:17.878Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "b0639a757ff76b21cdba-f5370dd20d0fcc8f5b39",
          "file": "test-2.spec.ts",
          "line": 32,
          "column": 5
        },
        {
          "title": "all products",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 3,
                  "status": "passed",
                  "duration": 4137,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Vneck Tshirt\n"
                    },
                    {
                      "text": "Tshirt\n"
                    },
                    {
                      "text": "Polo\n"
                    },
                    {
                      "text": "Long Sleeve Tee\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:17.571Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "b0639a757ff76b21cdba-b4651472fc220ab3dc9d",
          "file": "test-2.spec.ts",
          "line": 44,
          "column": 5
        },
        {
          "title": "Locator Handler",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 3,
                  "status": "passed",
                  "duration": 10313,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:22.695Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "b0639a757ff76b21cdba-11fb36a6c9f0134db46a",
          "file": "test-2.spec.ts",
          "line": 53,
          "column": 5
        },
        {
          "title": "test",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [
                {
                  "workerIndex": 8,
                  "status": "interrupted",
                  "duration": 2032,
                  "error": {
                    "message": "Error: browserContext.newPage: Target page, context or browser has been closed",
                    "stack": "Error: browserContext.newPage: Target page, context or browser has been closed"
                  },
                  "errors": [
                    {
                      "message": "Error: browserContext.newPage: Target page, context or browser has been closed"
                    },
                    {
                      "message": "Error: Target page, context or browser has been closed"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:54.899Z",
                  "attachments": []
                }
              ],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-88dcee9a60f2f5594e71",
          "file": "test-2.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "test2",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [
                {
                  "workerIndex": 10,
                  "status": "interrupted",
                  "duration": 46,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:57.797Z",
                  "attachments": []
                }
              ],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-6ca0a29c3e10db74b877",
          "file": "test-2.spec.ts",
          "line": 32,
          "column": 5
        },
        {
          "title": "all products",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-b3a9ef343824a400f7c2",
          "file": "test-2.spec.ts",
          "line": 44,
          "column": 5
        },
        {
          "title": "Locator Handler",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-8e4f8907f7a5fc96cfb3",
          "file": "test-2.spec.ts",
          "line": 53,
          "column": 5
        },
        {
          "title": "test",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-40e8f665cb1a0bd61868",
          "file": "test-2.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "test2",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-f467ffd38f9132ca87bf",
          "file": "test-2.spec.ts",
          "line": 32,
          "column": 5
        },
        {
          "title": "all products",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-5ec34e24088359a1d7fa",
          "file": "test-2.spec.ts",
          "line": 44,
          "column": 5
        },
        {
          "title": "Locator Handler",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "b0639a757ff76b21cdba-9b9a19f4745e45067ab1",
          "file": "test-2.spec.ts",
          "line": 53,
          "column": 5
        }
      ]
    },
    {
      "title": "test-3.spec.ts",
      "file": "test-3.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "actions",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 4,
                  "status": "failed",
                  "duration": 10341,
                  "error": {
                    "message": "TimeoutError: locator.pressSequentially: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('#textInput')\u001b[22m\n\u001b[2m    - locator resolved to <input type=\"text\" id=\"textInput\" name=\"textInput\" class=\"formInput\"/>\u001b[22m\n\u001b[2m  - elementHandle.type(\" Powell\")\u001b[22m\n",
                    "stack": "TimeoutError: locator.pressSequentially: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('#textInput')\u001b[22m\n\u001b[2m    - locator resolved to <input type=\"text\" id=\"textInput\" name=\"textInput\" class=\"formInput\"/>\u001b[22m\n\u001b[2m  - elementHandle.type(\" Powell\")\u001b[22m\n\n    at E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts:10:36",
                    "location": {
                      "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                      "column": 36,
                      "line": 10
                    },
                    "snippet": "\u001b[0m \u001b[90m  8 |\u001b[39m   \u001b[90m//await page.locator('#doesnotexist').click({timeout: 5000}); //By default actions dont have a timeout - they have whatever time the test has to complete (30s by default)\u001b[39m\n \u001b[90m  9 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mpressSequentially(\u001b[32m'Steve'\u001b[39m)\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 10 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mpressSequentially(\u001b[32m' Powell'\u001b[39m\u001b[33m,\u001b[39m {delay\u001b[33m:\u001b[39m \u001b[35m1000\u001b[39m})\u001b[33m;\u001b[39m \u001b[90m//Doesn't clear text that is already there (unlike fill) and can simulate slow keypresses \u001b[39m\n \u001b[90m    |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 11 |\u001b[39m\n \u001b[90m 12 |\u001b[39m   \u001b[90m//Image based validation\u001b[39m\n \u001b[90m 13 |\u001b[39m   \u001b[36mawait\u001b[39m expect(page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m))\u001b[33m.\u001b[39mtoHaveScreenshot(\u001b[32m'textbox.png'\u001b[39m\u001b[33m,\u001b[39m{\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                        "column": 36,
                        "line": 10
                      },
                      "message": "TimeoutError: locator.pressSequentially: Timeout 5000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('#textInput')\u001b[22m\n\u001b[2m    - locator resolved to <input type=\"text\" id=\"textInput\" name=\"textInput\" class=\"formInput\"/>\u001b[22m\n\u001b[2m  - elementHandle.type(\" Powell\")\u001b[22m\n\n\n\u001b[0m \u001b[90m  8 |\u001b[39m   \u001b[90m//await page.locator('#doesnotexist').click({timeout: 5000}); //By default actions dont have a timeout - they have whatever time the test has to complete (30s by default)\u001b[39m\n \u001b[90m  9 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mpressSequentially(\u001b[32m'Steve'\u001b[39m)\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 10 |\u001b[39m   \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mpressSequentially(\u001b[32m' Powell'\u001b[39m\u001b[33m,\u001b[39m {delay\u001b[33m:\u001b[39m \u001b[35m1000\u001b[39m})\u001b[33m;\u001b[39m \u001b[90m//Doesn't clear text that is already there (unlike fill) and can simulate slow keypresses \u001b[39m\n \u001b[90m    |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 11 |\u001b[39m\n \u001b[90m 12 |\u001b[39m   \u001b[90m//Image based validation\u001b[39m\n \u001b[90m 13 |\u001b[39m   \u001b[36mawait\u001b[39m expect(page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m))\u001b[33m.\u001b[39mtoHaveScreenshot(\u001b[32m'textbox.png'\u001b[39m\u001b[33m,\u001b[39m{\u001b[0m\n\u001b[2m    at E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts:10:36\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:31.971Z",
                  "attachments": [],
                  "errorLocation": {
                    "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                    "column": 36,
                    "line": 10
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-220c8960e4d328388974",
          "file": "test-3.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "drag drop slider",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 2,
                  "status": "passed",
                  "duration": 6790,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:32.788Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-742862a2cd0ecc918ea0",
          "file": "test-3.spec.ts",
          "line": 39,
          "column": 5
        },
        {
          "title": "compare runtime images",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 3,
                  "status": "failed",
                  "duration": 2985,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mBuffer\u001b[39m\u001b[2m).\u001b[22mtoMatchSnapshot\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n  162 pixels (ratio 0.03 of all image pixels) are different.\n\nExpected: \u001b[33mE:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png\u001b[39m\nReceived: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png\u001b[39m\n    Diff: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png\u001b[39m\n",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mBuffer\u001b[39m\u001b[2m).\u001b[22mtoMatchSnapshot\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n  162 pixels (ratio 0.03 of all image pixels) are different.\n\nExpected: \u001b[33mE:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png\u001b[39m\nReceived: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png\u001b[39m\n    Diff: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png\u001b[39m\n\n    at E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts:80:57",
                    "matcherResult": {
                      "name": "toMatchSnapshot",
                      "expected": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png",
                      "actual": "E:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png",
                      "diff": "E:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png",
                      "pass": false,
                      "message": "\u001b[2mexpect(\u001b[22m\u001b[31mBuffer\u001b[39m\u001b[2m).\u001b[22mtoMatchSnapshot\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n  162 pixels (ratio 0.03 of all image pixels) are different.\n\nExpected: \u001b[33mE:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png\u001b[39m\nReceived: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png\u001b[39m\n    Diff: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png\u001b[39m\n"
                    },
                    "location": {
                      "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                      "column": 57,
                      "line": 80
                    },
                    "snippet": "\u001b[0m \u001b[90m 78 |\u001b[39m\n \u001b[90m 79 |\u001b[39m   \u001b[90m//Recapture screenshot, compare to previous (on disk) version.\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 80 |\u001b[39m   expect(\u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mscreenshot())\u001b[33m.\u001b[39mtoMatchSnapshot(\u001b[32m'textbox2.png'\u001b[39m)\n \u001b[90m    |\u001b[39m                                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 81 |\u001b[39m\n \u001b[90m 82 |\u001b[39m   \u001b[90m//Now go look at the html report\u001b[39m\n \u001b[90m 83 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                        "column": 57,
                        "line": 80
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mBuffer\u001b[39m\u001b[2m).\u001b[22mtoMatchSnapshot\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n  162 pixels (ratio 0.03 of all image pixels) are different.\n\nExpected: \u001b[33mE:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png\u001b[39m\nReceived: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png\u001b[39m\n    Diff: \u001b[33mE:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png\u001b[39m\n\n\n\u001b[0m \u001b[90m 78 |\u001b[39m\n \u001b[90m 79 |\u001b[39m   \u001b[90m//Recapture screenshot, compare to previous (on disk) version.\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 80 |\u001b[39m   expect(\u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#textInput'\u001b[39m)\u001b[33m.\u001b[39mscreenshot())\u001b[33m.\u001b[39mtoMatchSnapshot(\u001b[32m'textbox2.png'\u001b[39m)\n \u001b[90m    |\u001b[39m                                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 81 |\u001b[39m\n \u001b[90m 82 |\u001b[39m   \u001b[90m//Now go look at the html report\u001b[39m\n \u001b[90m 83 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[2m    at E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts:80:57\u001b[22m"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:33.037Z",
                  "attachments": [
                    {
                      "name": "textbox2-expected.png",
                      "contentType": "image/png",
                      "path": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts-snapshots\\textbox2-chromium-win32.png"
                    },
                    {
                      "name": "textbox2-actual.png",
                      "contentType": "image/png",
                      "path": "E:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-actual.png"
                    },
                    {
                      "name": "textbox2-diff.png",
                      "contentType": "image/png",
                      "path": "E:\\JSTS\\nfocus7pw\\test-results\\test-3-compare-runtime-images-chromium\\textbox2-diff.png"
                    }
                  ],
                  "errorLocation": {
                    "file": "E:\\JSTS\\nfocus7pw\\tests\\test-3.spec.ts",
                    "column": 57,
                    "line": 80
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-2cf3bd3435af515c6f9e",
          "file": "test-3.spec.ts",
          "line": 56,
          "column": 5
        },
        {
          "title": "actions",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-d5c2490e09c953b37d3b",
          "file": "test-3.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "drag drop slider",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-9f275e6f4159765f59bd",
          "file": "test-3.spec.ts",
          "line": 39,
          "column": 5
        },
        {
          "title": "compare runtime images",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-5c18cc24bb29be12df90",
          "file": "test-3.spec.ts",
          "line": 56,
          "column": 5
        },
        {
          "title": "actions",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-c0607d70c51171738207",
          "file": "test-3.spec.ts",
          "line": 3,
          "column": 5
        },
        {
          "title": "drag drop slider",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-8f6a72bf604ad739a260",
          "file": "test-3.spec.ts",
          "line": 39,
          "column": 5
        },
        {
          "title": "compare runtime images",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "4b583dfcc6c9ec3b088b-3d9acd445c1d67160874",
          "file": "test-3.spec.ts",
          "line": 56,
          "column": 5
        }
      ]
    },
    {
      "title": "test-4.spec.ts",
      "file": "test-4.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "Waiting for a pop up window",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 5,
                  "status": "passed",
                  "duration": 8977,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Runs before any tests in this file execute\n"
                    },
                    {
                      "text": "Runs before each and every test\n"
                    },
                    {
                      "text": "Runs after each and every test\n"
                    },
                    {
                      "text": "Runs once at teh end after all tests have finished\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:39.562Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "e36f1d94e6ab19bad2b8-c4a6d46e43169502e8a0",
          "file": "test-4.spec.ts",
          "line": 107,
          "column": 5
        },
        {
          "title": "Waiting for a pop up window",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "e36f1d94e6ab19bad2b8-bb864520b0ef75580894",
          "file": "test-4.spec.ts",
          "line": 107,
          "column": 5
        },
        {
          "title": "Waiting for a pop up window",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "e36f1d94e6ab19bad2b8-33ae3a0d49fed44322c5",
          "file": "test-4.spec.ts",
          "line": 107,
          "column": 5
        }
      ],
      "suites": [
        {
          "title": "A test suite",
          "file": "test-4.spec.ts",
          "line": 23,
          "column": 6,
          "specs": [
            {
              "title": "Capturing values",
              "ok": true,
              "tags": [
                "thisisatag",
                "thistoo"
              ],
              "tests": [
                {
                  "timeout": 15000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "status": "passed",
                      "duration": 4399,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Runs before any tests in this file execute\n"
                        },
                        {
                          "text": "Runs before each and every test\n"
                        },
                        {
                          "text": "Runs before each and every test in this test describe block\n"
                        },
                        {
                          "text": "The right column text is with textContent is: \n                Forms\n                \n                \n                This form has an id of theForm.\n                \n                \n                \n                    \n                        \n                            Text Input with id/name textInput *\n                            \n                                \n                            \n                        \n                        \n                            Text Area with id/name textArea\n                            \n                                \n                            \n                        \n                        \n                            Checkbox with id/name checkbox\n                            \n                                \n                            \n                        \n                        \n                            Select with id/name select\n                            \n                                \n                                    Selection One\n                                    Selection Two\n                                    Selection Three                                                                        \n                                \n                            \n                        \n                        \n                            \n                                Radio buttons with id/name radio\n                            \n                            \n                                One\n                                Two\n                                Three\n                            \n                        \n                        \n                            \n                                Password input with id/name password\n                            \n                            \n                                \n                            \n                        \n                        \n                            \n                                File selector with id/name file\n                            \n                            \n                                \n                            \n                         \n                        \n                            \n                            \n                                Submit  Clear                                \n                            \n                        \n                        \n                            * Mandatory field.\n                    \n                \n                \n                    \n                        \n                            Type\n                            id\n                            Value\n                        \n                        \n                            Text input\n                            textInput\n                            \n                        \n                        \n                            Text area\n                            textArea\n                            \n                        \n                        \n                            Select\n                            select\n                            \n                        \n                        \n                            Checkbox\n                            checkbox\n                            \n                        \n                        \n                            Radio buttons\n                            textInput\n                            \n                        \n                        \n                            Password\n                            password\n                            \n                        \n                        \n                            File Input\n                            file\n                            \n                                                                                                                                                \n                    \n                    \n                    Back to form\n                \n            \n"
                        },
                        {
                          "text": "The right column text is with innertext is: Forms\n\nThis form has an id of theForm.\n\nText Input with id/name textInput *\t\nText Area with id/name textArea\t\nCheckbox with id/name checkbox\t\nSelect with id/name select\t\nSelection One\nSelection Two\nSelection Three\n\nRadio buttons with id/name radio\tOne Two Three\nPassword input with id/name password\t\nFile selector with id/name file\t\n\tSubmit Clear\n* Mandatory field.\n"
                        },
                        {
                          "text": "The text box contains\n"
                        },
                        {
                          "text": "The text box actually contains: Hello world\n"
                        },
                        {
                          "text": "Runs after each and every test\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2024-12-06T11:41:33.812Z",
                      "attachments": []
                    },
                    {
                      "workerIndex": 9,
                      "status": "interrupted",
                      "duration": 2568,
                      "error": {
                        "message": "Error: Target page, context or browser has been closed",
                        "stack": "Error: Target page, context or browser has been closed"
                      },
                      "errors": [
                        {
                          "message": "Error: Target page, context or browser has been closed"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Runs before any tests in this file execute\n"
                        },
                        {
                          "text": "Runs before each and every test\n"
                        },
                        {
                          "text": "Runs before each and every test in this test describe block\n"
                        },
                        {
                          "text": "Runs after each and every test\n"
                        },
                        {
                          "text": "Runs once at teh end after all tests have finished\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2024-12-06T11:41:56.998Z",
                      "attachments": [
                        {
                          "name": "trace",
                          "contentType": "application/zip",
                          "path": "E:\\JSTS\\nfocus7pw\\test-results\\test-4-A-test-suite-Capturing-values-chromium-retry1\\trace.zip"
                        }
                      ]
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e36f1d94e6ab19bad2b8-c535f89ada4c289eebb6",
              "file": "test-4.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Capturing values",
              "ok": true,
              "tags": [
                "thisisatag",
                "thistoo"
              ],
              "tests": [
                {
                  "timeout": 15000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "firefox",
                  "projectName": "firefox",
                  "results": [],
                  "status": "skipped"
                }
              ],
              "id": "e36f1d94e6ab19bad2b8-b1dda78c6565cb56afce",
              "file": "test-4.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Capturing values",
              "ok": true,
              "tags": [
                "thisisatag",
                "thistoo"
              ],
              "tests": [
                {
                  "timeout": 15000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [],
                  "status": "skipped"
                }
              ],
              "id": "e36f1d94e6ab19bad2b8-d93d8d3cb8b7f3fdffc5",
              "file": "test-4.spec.ts",
              "line": 29,
              "column": 9
            }
          ],
          "suites": [
            {
              "title": "An inner suite",
              "file": "test-4.spec.ts",
              "line": 60,
              "column": 19,
              "specs": [
                {
                  "title": "Generic methods",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "chromium",
                      "projectName": "chromium",
                      "results": [
                        {
                          "workerIndex": 1,
                          "status": "passed",
                          "duration": 3745,
                          "errors": [],
                          "stdout": [
                            {
                              "text": "Runs before each and every test\n"
                            },
                            {
                              "text": "Runs before each and every test in this test describe block\n"
                            },
                            {
                              "text": "There are 5 links\n"
                            },
                            {
                              "text": "The link texts are:\n"
                            },
                            {
                              "text": "Home\n"
                            },
                            {
                              "text": "Basic HTML\n"
                            },
                            {
                              "text": "Forms\n"
                            },
                            {
                              "text": "Dynamic Content\n"
                            },
                            {
                              "text": "CSS/XPath\n"
                            },
                            {
                              "text": "Home\n"
                            },
                            {
                              "text": "Basic HTML\n"
                            },
                            {
                              "text": "Forms\n"
                            },
                            {
                              "text": "Dynamic Content\n"
                            },
                            {
                              "text": "CSS/XPath\n"
                            },
                            {
                              "text": "Runs after each and every test\n"
                            }
                          ],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2024-12-06T11:41:38.246Z",
                          "attachments": []
                        },
                        {
                          "workerIndex": -1,
                          "status": "skipped",
                          "duration": 0,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 1,
                          "startTime": "2024-12-06T11:42:02.281Z",
                          "attachments": []
                        }
                      ],
                      "status": "expected"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-15ece3ff1e408ef33f09",
                  "file": "test-4.spec.ts",
                  "line": 65,
                  "column": 13
                },
                {
                  "title": "waiting",
                  "ok": false,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "chromium",
                      "projectName": "chromium",
                      "results": [
                        {
                          "workerIndex": 1,
                          "status": "timedOut",
                          "duration": 10027,
                          "error": {
                            "message": "\u001b[31mTest timeout of 10000ms exceeded.\u001b[39m",
                            "stack": "\u001b[31mTest timeout of 10000ms exceeded.\u001b[39m"
                          },
                          "errors": [
                            {
                              "message": "\u001b[31mTest timeout of 10000ms exceeded.\u001b[39m"
                            },
                            {
                              "location": {
                                "file": "E:\\JSTS\\nfocus7pw\\tests\\test-4.spec.ts",
                                "column": 24,
                                "line": 98
                              },
                              "message": "Error: page.waitForSelector: Test timeout of 10000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('#spinner-holder') to be hidden\u001b[22m\n\u001b[2m    8 × locator resolved to visible <span id=\"spinner-holder\">…</span>\u001b[22m\n\n\n\u001b[0m \u001b[90m  96 |\u001b[39m             \u001b[90m//await page.locator('#image-holder > img').click({timeout: 8000}); //Set action timeout locally for just this step\u001b[39m\n \u001b[90m  97 |\u001b[39m             \u001b[90m//await page.waitForSelector('#image-holder > img', {timeout: 12000, state:'visible'})\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  98 |\u001b[39m             \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mwaitForSelector(\u001b[32m'#spinner-holder'\u001b[39m\u001b[33m,\u001b[39m { timeout\u001b[33m:\u001b[39m \u001b[35m12000\u001b[39m\u001b[33m,\u001b[39m state\u001b[33m:\u001b[39m \u001b[32m'hidden'\u001b[39m }) \u001b[90m//Wait for loading spinner to go away\u001b[39m\n \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m  99 |\u001b[39m             \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mlocator(\u001b[32m'#image-holder > img'\u001b[39m)\u001b[33m.\u001b[39mclick()\u001b[33m;\u001b[39m\n \u001b[90m 100 |\u001b[39m             \u001b[36mawait\u001b[39m page\u001b[33m.\u001b[39mgetByRole(\u001b[32m'link'\u001b[39m\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'Home'\u001b[39m })\u001b[33m.\u001b[39mclick()\u001b[33m;\u001b[39m\n \u001b[90m 101 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[2m    at E:\\JSTS\\nfocus7pw\\tests\\test-4.spec.ts:98:24\u001b[22m"
                            }
                          ],
                          "stdout": [
                            {
                              "text": "Runs before each and every test\n"
                            },
                            {
                              "text": "Runs before each and every test in this test describe block\n"
                            },
                            {
                              "text": "Runs after each and every test\n"
                            },
                            {
                              "text": "Runs once at teh end after all tests have finished\n"
                            }
                          ],
                          "stderr": [],
                          "retry": 0,
                          "startTime": "2024-12-06T11:41:42.007Z",
                          "attachments": []
                        },
                        {
                          "workerIndex": -1,
                          "status": "skipped",
                          "duration": 0,
                          "errors": [],
                          "stdout": [],
                          "stderr": [],
                          "retry": 1,
                          "startTime": "2024-12-06T11:42:02.278Z",
                          "attachments": []
                        }
                      ],
                      "status": "unexpected"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-8c25d91cd5140f03e1a7",
                  "file": "test-4.spec.ts",
                  "line": 87,
                  "column": 13
                },
                {
                  "title": "Generic methods",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "firefox",
                      "projectName": "firefox",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-7c887aad9858de233ce8",
                  "file": "test-4.spec.ts",
                  "line": 65,
                  "column": 13
                },
                {
                  "title": "waiting",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "firefox",
                      "projectName": "firefox",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-90a908dbd8ae73dba86a",
                  "file": "test-4.spec.ts",
                  "line": 87,
                  "column": 13
                },
                {
                  "title": "Generic methods",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "webkit",
                      "projectName": "webkit",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-9aaeb8cf838f562d6183",
                  "file": "test-4.spec.ts",
                  "line": 65,
                  "column": 13
                },
                {
                  "title": "waiting",
                  "ok": true,
                  "tags": [],
                  "tests": [
                    {
                      "timeout": 10000,
                      "annotations": [],
                      "expectedStatus": "passed",
                      "projectId": "webkit",
                      "projectName": "webkit",
                      "results": [],
                      "status": "skipped"
                    }
                  ],
                  "id": "e36f1d94e6ab19bad2b8-a131110a78448509003b",
                  "file": "test-4.spec.ts",
                  "line": 87,
                  "column": 13
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "test-5.spec.ts",
      "file": "test-5.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "Non POM Traditional",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 2,
                  "status": "passed",
                  "duration": 5394,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:39.614Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "13f29a8a41af819426ae-a81f5f1f96bf571070aa",
          "file": "test-5.spec.ts",
          "line": 6,
          "column": 5
        },
        {
          "title": "Pomified",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 6,
                  "status": "passed",
                  "duration": 4450,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:47.239Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "13f29a8a41af819426ae-8a2c977756193bd12208",
          "file": "test-5.spec.ts",
          "line": 18,
          "column": 5
        },
        {
          "title": "Screenshot demo",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 2,
                  "status": "passed",
                  "duration": 2654,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:45.027Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "13f29a8a41af819426ae-9156e5f2783f97ef6061",
          "file": "test-5.spec.ts",
          "line": 33,
          "column": 5
        },
        {
          "title": "Reporting demos",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [
                {
                  "type": "Some custom type",
                  "description": "Some description"
                }
              ],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 2,
                  "status": "passed",
                  "duration": 3156,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Attached screenshot to report\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2024-12-06T11:41:47.700Z",
                  "attachments": [
                    {
                      "name": "Viewpoert screenshot",
                      "contentType": "image/png",
                      "path": "E:\\JSTS\\nfocus7pw\\test-results\\test-5-Reporting-demos-chromium\\attachments\\Viewpoert-screenshot-f413aa55320d1720c22f501ae1edab3d577d8fcc.png"
                    },
                    {
                      "name": "Some text to attach",
                      "contentType": "text/plain",
                      "body": "VGhpcyBpcyB0aGUgYXR0YWNoZWQgdGV4dA=="
                    },
                    {
                      "name": "Screenshot stored in memory",
                      "contentType": "image/png",
                      "body": ""
                    }
                  ]
                }
              ],
              "status": "expected"
            }
          ],
          "id": "13f29a8a41af819426ae-8d9fd6df00d8cd68ddfe",
          "file": "test-5.spec.ts",
          "line": 51,
          "column": 5
        },
        {
          "title": "Non POM Traditional",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-595e050b01fcbc81013e",
          "file": "test-5.spec.ts",
          "line": 6,
          "column": 5
        },
        {
          "title": "Pomified",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-080783a72d36c5db8ed1",
          "file": "test-5.spec.ts",
          "line": 18,
          "column": 5
        },
        {
          "title": "Screenshot demo",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-e331df2b1c95b09b996f",
          "file": "test-5.spec.ts",
          "line": 33,
          "column": 5
        },
        {
          "title": "Reporting demos",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [
                {
                  "type": "Some custom type",
                  "description": "Some description"
                }
              ],
              "expectedStatus": "passed",
              "projectId": "firefox",
              "projectName": "firefox",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-d107b5cf39577c288201",
          "file": "test-5.spec.ts",
          "line": 51,
          "column": 5
        },
        {
          "title": "Non POM Traditional",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-3188a008390958b696ea",
          "file": "test-5.spec.ts",
          "line": 6,
          "column": 5
        },
        {
          "title": "Pomified",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-72e43a28c1eb668ca859",
          "file": "test-5.spec.ts",
          "line": 18,
          "column": 5
        },
        {
          "title": "Screenshot demo",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-256f4221bfa1e1dab1a4",
          "file": "test-5.spec.ts",
          "line": 33,
          "column": 5
        },
        {
          "title": "Reporting demos",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 20000,
              "annotations": [
                {
                  "type": "Some custom type",
                  "description": "Some description"
                }
              ],
              "expectedStatus": "passed",
              "projectId": "webkit",
              "projectName": "webkit",
              "results": [],
              "status": "skipped"
            }
          ],
          "id": "13f29a8a41af819426ae-88d11c20ef9912540f3f",
          "file": "test-5.spec.ts",
          "line": 51,
          "column": 5
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2024-12-06T11:41:13.939Z",
    "duration": 49099.754,
    "expected": 12,
    "skipped": 32,
    "unexpected": 4,
    "flaky": 0
  }
}